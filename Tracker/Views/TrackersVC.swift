

import UIKit

final class TrackersViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, NewHabitViewControllerDelegate {
    
    
    
    private let plusButton = UIButton()
    private let trackersLabel = UILabel()
    private let emptyFieldStarImage = UIImageView()
    private let emptyFieldLabel = UILabel()
    
    
    private var datePickerHeightConstraint: NSLayoutConstraint?
    
    var categories: [TrackerCategory] = []
    var filteredCategories: [TrackerCategory] = []
    var trackerRecords: [TrackerRecord] = []
    var currentDate: Date = Date()
    var currentSelectedTracker: Tracker?
    
    
    
    private let categoriesCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.minimumLineSpacing = 0
        layout.minimumInteritemSpacing = 9
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.backgroundColor = .clear
        return collectionView
    }()
    
    private let searchBar: UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.placeholder = "–ü–æ–∏—Å–∫"
        searchBar.backgroundColor = UIColor.custom(.backgroundGray)
        searchBar.searchBarStyle = .minimal
        searchBar.setImage(UIImage(systemName: "magnifyingglass"), for: .search, state: .normal)
        searchBar.layer.cornerRadius = 10
        return searchBar
    }()
    
    private lazy var dateButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle(currentDateFormatted(), for: .normal)
        button.setTitleColor(.label, for: .normal)
        button.backgroundColor = UIColor.custom(.dataGray)
        button.titleLabel?.font = .systemFont(ofSize: 16)
        button.addTarget(self, action: #selector(toggleCalendar), for: .touchUpInside)
        button.layer.cornerRadius = 8
        button.clipsToBounds = true
        return button
    }()
    
    private lazy var datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.datePickerMode = .date
        if #available(iOS 14.0, *) {
            picker.preferredDatePickerStyle = .inline
        } else {
            
            picker.datePickerMode = .date
        }
        picker.isHidden = true // –°–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        picker.addTarget(self, action: #selector(dateChanged(_:)), for: .valueChanged)
        picker.backgroundColor = UIColor.custom(.backgroundGray)
        return picker
    }()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupInitialUI()
        
        setupDefaultCategories()
        reloadCategoryData()
        updateUI()
       
        updateVisibleTrackers(for: datePicker.date)
    }
    
    private func setupDefaultCategories() {
        let defaultTracker1 = Tracker(id: 1, name: "–£–±–æ—Ä–∫–∞", color: .collectionBlue3, emoji: "üôÇ", daysCount: 1, weekDays: [ "Mon", "Wed"])
        let defaultTracker2 = Tracker(id: 2, name: "–°—Ç–∏—Ä–∫–∞", color: .collectionPink12, emoji: "üòª", daysCount: 3, weekDays: ["Fri"])
        let defaultTracker3 = Tracker(id: 3, name: "–ó–∞—Ä—è–¥–∫–∞", color: .collectionDarkPurple10, emoji: "‚ù§Ô∏è", daysCount: 4, weekDays: ["Sat"])
        let defaultTraker4 = Tracker(id: 4, name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–Ω–æ—É–±–æ—Ä–¥—É", color: .collectionViolet6, emoji: "üòà", daysCount: 5, weekDays: ["Tue", "Wed", "Thu", "Fri", "Sat"])
        let defaultTracker5 = Tracker(id: 5, name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª—ã–∂–∞–º", color: .collectionOrange2, emoji: "ü•∂", daysCount: 2, weekDays: ["Tue", "Fri", "Sat"])
        let defaultTracker6 = Tracker(id: 6, name: "–†–∞–±–æ—Ç–∞ –≤ —Å–∞–¥—É", color: .collectionGreen18, emoji: "üå∫", daysCount: 2, weekDays: ["Tue", "Wed", "Thu", "Fri", "Sun"])
        
        let defaultCategory = TrackerCategory(title: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", tracker: [defaultTracker1, defaultTracker2, defaultTracker3])
        let newCategory = TrackerCategory(title: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", tracker: [defaultTraker4, defaultTracker5, defaultTracker6])
        
        categories.append(defaultCategory)
        categories.append(newCategory)
    }
    
    func reloadCategoryData() {
        categoriesCollectionView.reloadData()
        
    }
    
    //—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º
    func didCreateTracker(_ tracker: Tracker, _ category: TrackerCategory) {
        
        categories.append(category)
        
        print("–í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ didCreateTracker –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è \(category)")
        reloadCategoryData()
    }
    
    private func currentDateFormatted() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy"
        return formatter.string(from: Date())
    }
    
    private func updateVisibleTrackers(for selectedDate: Date) {
        let calendar = Calendar.current
        let weekdaySymbols = calendar.shortWeekdaySymbols
        let selectedWeekdayIndex = calendar.component(.weekday, from: selectedDate) - 1
        let selectedWeekday = weekdaySymbols[selectedWeekdayIndex]

        filteredCategories = categories.map { category in
            let filteredTrackers = category.tracker.filter { $0.weekDays.contains(selectedWeekday) }
            return TrackerCategory(title: category.title, tracker: filteredTrackers)
        }.filter { !$0.tracker.isEmpty } // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        categoriesCollectionView.reloadData()
    }
    
    @objc private func datePickerValueChanged(_ sender: UIDatePicker) {
        updateVisibleTrackers(for: sender.date)
    }
    
    private func getDayWord(for count: Int) -> String {
        let remainder10 = count % 10
        let remainder100 = count % 100
        
        if remainder10 == 1 && remainder100 != 11 {
            return "–¥–µ–Ω—å"
        } else if remainder10 >= 2 && remainder10 <= 4 && (remainder100 < 10 || remainder100 >= 20) {
            return "–¥–Ω—è"
        } else {
            return "–¥–Ω–µ–π"
        }
    }
    
    
    @objc private func dateChanged(_ sender: UIDatePicker) {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy"
        let selectedDate = formatter.string(from: sender.date)
        dateButton.setTitle(selectedDate, for: .normal)
        // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        UIView.animate(withDuration: 0.3, animations: {
            self.datePickerHeightConstraint?.constant = 0 // –£–±–∏—Ä–∞–µ–º –≤—ã—Å–æ—Ç—É
            self.view.layoutIfNeeded() // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        }, completion: { _ in
            self.datePicker.isHidden = true // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        })
    }
    
    
    @objc private func toggleCalendar() {
        let isHidden = datePicker.isHidden
        datePicker.isHidden = false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –±—ã–ª–∞ –≤–∏–¥–Ω–∞
        
        UIView.animate(withDuration: 0.3, animations: {
            self.datePickerHeightConstraint?.constant = isHidden ? 330 : 0 // –£–∫–∞–∑—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
            self.view.layoutIfNeeded() // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        }, completion: { _ in
            self.datePicker.isHidden = !isHidden // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        })
    }
    
    
    
    private func configureLabel(_ label: UILabel, text: String, fontSize: CGFloat, weight: UIFont.Weight, color: CustomColors) {
        label.text = text
        label.font = UIFont.systemFont(ofSize: fontSize, weight: weight)
        label.textColor = UIColor(named: color.rawValue)
    }
    
    
    private func updateUI() {
        let hasTrackers = !(categories.isEmpty)
        emptyFieldLabel.isHidden = hasTrackers
        emptyFieldStarImage.isHidden = hasTrackers
        categoriesCollectionView.isHidden = !hasTrackers
    }
    
    private func setupInitialUI() {
        updateUI()
        
        view.backgroundColor = UIColor(named: CustomColors.backgroundGray.rawValue)
        
        let uiElements = [plusButton, dateButton, categoriesCollectionView, trackersLabel, searchBar, emptyFieldStarImage, emptyFieldLabel, datePicker]
        uiElements.forEach {$0.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview($0)
        }
        
        configureLabel(trackersLabel, text: "–¢—Ä–µ–∫–µ—Ä—ã", fontSize: 34, weight: .bold, color: .textColor)
        configureLabel(emptyFieldLabel, text: "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?", fontSize: 12, weight: .regular, color: .textColor)
        plusButton.setImage(UIImage(named: "plusButton"), for: .normal)
        plusButton.addTarget(self, action: #selector(plusButtonTapped), for: .touchUpInside)
        emptyFieldStarImage.image = UIImage(named: "dizzyStar")
        
        datePicker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged)
        datePickerHeightConstraint = datePicker.heightAnchor.constraint(equalToConstant: 0)
        if let datePickerHeightConstraint = datePickerHeightConstraint {
            NSLayoutConstraint.activate([
                
                datePicker.topAnchor.constraint(equalTo: dateButton.bottomAnchor, constant: 8),
                datePicker.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
                datePicker.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
                datePickerHeightConstraint
            ])
        }
        
        NSLayoutConstraint.activate([
            
            categoriesCollectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            categoriesCollectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
            categoriesCollectionView.topAnchor.constraint(equalTo: searchBar.bottomAnchor, constant: 34),
            categoriesCollectionView.heightAnchor.constraint(equalToConstant: 1200),
            
            
            plusButton.heightAnchor.constraint(equalToConstant: 19),
            plusButton.widthAnchor.constraint(equalToConstant: 18),
            plusButton.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 18),
            plusButton.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 13),
            
            dateButton.heightAnchor.constraint(equalToConstant: 34),
            dateButton.widthAnchor.constraint(equalToConstant: 77),
            dateButton.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
            dateButton.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 5),
            
            trackersLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            trackersLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 44),
            
            searchBar.trailingAnchor.constraint(equalTo:view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
            searchBar.heightAnchor.constraint(equalToConstant: 36),
            searchBar.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            searchBar.topAnchor.constraint(equalTo: trackersLabel.bottomAnchor, constant: 12),
            
            emptyFieldLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            emptyFieldLabel.topAnchor.constraint(equalTo: emptyFieldStarImage.bottomAnchor, constant: 8),
            
            emptyFieldStarImage.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            emptyFieldStarImage.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            emptyFieldStarImage.widthAnchor.constraint(equalToConstant: 80),
            emptyFieldStarImage.heightAnchor.constraint(equalToConstant: 80)
            
        ])
        
        categoriesCollectionView.dataSource = self
        
        categoriesCollectionView.register(CategoriesCollectionHeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: CategoriesCollectionHeaderView.identifier)
        
        
        categoriesCollectionView.register(TrackerCategoryCell.self, forCellWithReuseIdentifier: TrackerCategoryCell.reuseIdentifier)
        
        categoriesCollectionView.delegate = self
        searchBar.delegate = self
    }
    
    
    
    @objc private func plusButtonTapped() {
        let createHabitVC = CreateHabitTypeViewController()
        createHabitVC.delegate = self
        let navigationController = UINavigationController(rootViewController: createHabitVC)
        navigationController.modalPresentationStyle = .automatic
        present(navigationController, animated: true)
    }
    
  
    
}

extension TrackersViewController: TrackerCellDelegate {
    func getTrackerByID(_ trackerID: Int) -> Tracker? {
        for category in categories {
            if let tracker = category.tracker.first(where: { $0.id == trackerID }) {
                return tracker
            }
        }
        return nil
    }
    
    func trackerCell(_ cell: TrackerCategoryCell, didTapDoneButtonFor trackerID: Int) {
        let currentDate = Date()
        let calendar = Calendar.current

        if let existingIndex = trackerRecords.firstIndex(where: { $0.trackerID == trackerID && calendar.isDate($0.date, inSameDayAs: currentDate) }) {
            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            trackerRecords.remove(at: existingIndex)
            updateTrackerDaysCount(for: trackerID, isChecked: false)
            print("–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ \(trackerID)")
            
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            let newRecord = TrackerRecord(trackerID: trackerID, date: currentDate)
            trackerRecords.append(newRecord)
            print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: \(newRecord)")
            updateTrackerDaysCount(for: trackerID, isChecked: true)
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (true ‚Äî —Ç—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, false ‚Äî —É–¥–∞–ª—ë–Ω)
        let isChecked = trackerRecords.contains(where: { $0.trackerID == trackerID && calendar.isDate($0.date, inSameDayAs: currentDate) })

        // –û–±–Ω–æ–≤–ª—è–µ–º UI —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        if let indexPath = categoriesCollectionView.indexPath(for: cell),
           let tracker = getTrackerByID(trackerID) {

            categoriesCollectionView.performBatchUpdates({
                cell.doneButton.setImage(UIImage(systemName: isChecked ? "checkmark" : "plus"), for: .normal)
                if let baseColor = UIColor.fromCollectionColor(tracker.color) {
                    cell.doneButtonContainer.backgroundColor = isChecked ? lightenColor(baseColor, by: 0.3) : baseColor
                } else {
                    cell.doneButtonContainer.backgroundColor = .gray
                }
                let daysCount = tracker.daysCount
                cell.daysCountLabel.text = getDayWord(for: daysCount)
                cell.daysNumberLabel.text = "\(tracker.daysCount)" // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω–µ–π
               }, completion: nil)
        }
    }
    
    private func updateTrackerDaysCount(for trackerID: Int, isChecked: Bool) {
        if let categoryIndex = categories.firstIndex(where: { category in
            category.tracker.contains(where: { $0.id == trackerID })
        }) {
            let category = categories[categoryIndex]
            
            if let trackerIndex = category.tracker.firstIndex(where: { $0.id == trackerID }) {
                let tracker = category.tracker[trackerIndex]
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                let updatedDaysCount = tracker.daysCount + (isChecked ? 1 : -1)
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
                let updatedTracker = Tracker(
                    id: tracker.id,
                    name: tracker.name,
                    color: tracker.color,
                    emoji: tracker.emoji,
                    daysCount: max(0, updatedDaysCount),
                    weekDays: tracker.weekDays
                )
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–µ—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ç—Ä–µ–∫–µ—Ä–æ–º
                var updatedTrackers = category.tracker
                updatedTrackers[trackerIndex] = updatedTracker
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º —Ç—Ä–µ–∫–µ—Ä–æ–≤
                let updatedCategory = TrackerCategory(title: category.title, tracker: updatedTrackers)
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                var updatedCategories = categories
                updatedCategories[categoryIndex] = updatedCategory
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                categories = updatedCategories
            }
        }
    }
}


extension TrackersViewController {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        
        return filteredCategories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let category = filteredCategories[section]
        return  category.tracker.count
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let section = indexPath.section
        let row = indexPath.row
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –∏–∑ —Å–µ–∫—Ü–∏–∏
        let selectedTracker = categories[section].tracker[row]
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        currentSelectedTracker = selectedTracker
        
        print("–í—ã–±—Ä–∞–Ω —Ç—Ä–µ–∫–µ—Ä: \(selectedTracker.name)")
        
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        if section == 0 {
            // –î–ª—è –ø–µ—Ä–≤–æ–π —Å–µ–∫—Ü–∏–∏
            return UIEdgeInsets(top: 12, left: 0, bottom: 0, right: 0)
        } else {
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            return UIEdgeInsets(top: 16, left: 0, bottom: 0, right: 0)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = categoriesCollectionView.dequeueReusableCell(withReuseIdentifier: TrackerCategoryCell.reuseIdentifier, for: indexPath) as? TrackerCategoryCell else {
            return UICollectionViewCell()
        }
        
        let category = filteredCategories[indexPath.section]  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
        let tracker = category.tracker[indexPath.item]  // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
        let trackerRecordsForTracker = trackerRecords.filter { $0.trackerID == tracker.id }
        cell.delegate = self
        // –ù–∞—Å—Ç—Ä–æ–∏–º —è—á–µ–π–∫—É
        cell.configure(with: tracker, trackerRecords: trackerRecordsForTracker)
        
        return cell
    }
    
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        guard kind == UICollectionView.elementKindSectionHeader,
              let header = collectionView.dequeueReusableSupplementaryView(
                ofKind: kind,
                withReuseIdentifier: CategoriesCollectionHeaderView.identifier,
                for: indexPath
              ) as? CategoriesCollectionHeaderView else {
            return UICollectionReusableView()
        }
        
        let category = categories[indexPath.section]
        header.configure(with: category.title)
        
        return header
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: 150, height: 18)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        let collectionWidth = categoriesCollectionView.bounds.width
        
        // –û—Ç—Å—Ç—É–ø—ã (–µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã –≤ layout)
        let sectionInset = (collectionViewLayout as? UICollectionViewFlowLayout)?.sectionInset ?? .zero
        let minimumSpacing = (collectionViewLayout as? UICollectionViewFlowLayout)?.minimumInteritemSpacing ?? 0
        
        // –î–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —è—á–µ–µ–∫ (—É–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å–µ–∫—Ü–∏–∏)
        let availableWidth = collectionWidth - sectionInset.left - sectionInset.right
        
        // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
        let cellWidth = (availableWidth - minimumSpacing) / 2
        
        // –í—ã—Å–æ—Ç–∞ —è—á–µ–π–∫–∏ (–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±—É—é, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        let cellHeight: CGFloat = 148 // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        
        return CGSize(width: cellWidth, height: cellHeight)
    }
}

extension TrackersViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        filterTrackers(for: searchText)
    }
    
   
    
    private func filterTrackers(for searchText: String) {
        if searchText.isEmpty {
            filteredCategories = categories // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        } else {
            filteredCategories = categories.compactMap { category in
                let filteredTrackers = category.tracker.filter { tracker in
                    tracker.name.lowercased().contains(searchText.lowercased())
                }
                return filteredTrackers.isEmpty ? nil : TrackerCategory(title: category.title, tracker: filteredTrackers)
            }
        }
        
        categoriesCollectionView.reloadData()
    }
}
